<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TSP solver library</name>
    </assembly>
    <members>
        <member name="T:TSP_Solver.TSPSolver2D">
            <summary>
            The 2D solver
            </summary>
        </member>
        <member name="M:TSP_Solver.TSPSolver2D.#ctor(System.Collections.Generic.List{TSP_Solver.City2})">
            <summary>
            2D solver builder
            </summary>
            <param name="cities"></param>
        </member>
        <member name="M:TSP_Solver.TSPSolver2D.Solve(System.Boolean)">
            <summary>
            The function for solving the problem in a 2D configuration
            </summary>
            <param name="threeOpt"></param>
            <returns>The best route found, its distance and the MST</returns>
        </member>
        <member name="T:TSP_Solver.TSPSolver2DFunctions">
            <summary>
            The class contains the functions used by the 2D solver, so you don't need to use it
            </summary>
        </member>
        <member name="T:TSP_Solver.City2">
            <summary>
            Class representing 2D points
            </summary>
        </member>
        <member name="T:TSP_Solver.Distance2">
            <summary>
            Class used by the 2D solver, so you don't need to use it
            </summary>
        </member>
        <member name="T:TSP_Solver.TSPSolver3D">
            <summary>
            The 3D solver
            </summary>
        </member>
        <member name="M:TSP_Solver.TSPSolver3D.#ctor(System.Collections.Generic.List{TSP_Solver.City3},System.Boolean,System.Double)">
            <summary>
            3D solver builder
            </summary>
            <param name="cities">Points of the path you want to create</param>
            <param name="geodesic">If you use geodesic 3D</param>
            <param name="radius">The radius of the earth</param>
        </member>
        <member name="M:TSP_Solver.TSPSolver3D.#ctor(System.Collections.Generic.List{TSP_Solver.City3},System.Collections.Generic.List{TSP_Solver.Distance3},System.Boolean,System.Boolean,System.Double)">
            <summary>
            3D solver builder for cases where distances are required in creation (asymmetrical or incomplete cases)
            </summary>
            <param name="cities">Points of the path you want to create</param>
            <param name="distances">Distances that can be used</param>
            <param name="geodesic">If you use geodesic 3D</param>
            <param name="symmetric">If the TSP is symmetric</param>
            <param name="radius">The radius of the earth</param>
        </member>
        <member name="M:TSP_Solver.TSPSolver3D.Solve(System.Boolean,System.Boolean)">
            <summary>
            The function for solving the problem in a 3D configuration
            </summary>
            <param name="threeOpt">If you want to use 3-opt</param>
            <param name="twoAndOneOpt">If you want to use 2-opt and 1-opt</param>
            <returns>The best route found, its distance and the MST</returns>
        </member>
        <member name="T:TSP_Solver.TSPSolver3DFunctions">
            <summary>
            The class contains the functions used by the 3D solver, so you don't need to use it
            </summary>
        </member>
        <member name="T:TSP_Solver.City3">
            <summary>
            Class representing 3D points
            </summary>
        </member>
        <member name="M:TSP_Solver.City3.#ctor(TSP_Solver.Vector3,System.Int32)">
            <summary>
            City3 builder for cartesian 3D
            </summary>
            <param name="position">The vector3 which contains the positions of the point</param>
            <param name="id">The Id of the point</param>
        </member>
        <member name="M:TSP_Solver.City3.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            City3 builder for geodesic 3D
            </summary>
            <param name="latitude">The latitude of the point in radians</param>
            <param name="longitude">The longitude of the point in radians</param>
            <param name="altitude">The altitude of the point in meters</param>
            <param name="id">The Id of the point</param>
            <param name="radius">The radius of the earth</param>
        </member>
        <member name="T:TSP_Solver.Distance3">
            <summary>
            Class used by the 3D solver, so you don't need to use it
            </summary>
        </member>
        <member name="M:TSP_Solver.Distance3.Contains(TSP_Solver.City3)">
            <summary>
            If the distance contains the point
            </summary>
            <param name="city">The point to test</param>
            <returns>True if the distance contains the point else false</returns>
        </member>
        <member name="M:TSP_Solver.Distance3.Contains(TSP_Solver.City3,TSP_Solver.City3)">
            <summary>
            If the distance is composed of the two points
            </summary>
            <param name="cityOne">One of the two points to test</param>
            <param name="cityTwo">One of the two points to test</param>
            <returns>True if the distance contains the two points else false</returns>
        </member>
        <member name="M:TSP_Solver.Distance3.#ctor(TSP_Solver.City3,TSP_Solver.City3)">
            <summary>
            Simple Distance3 builder
            </summary>
            <param name="first">One of the points of the distance</param>
            <param name="second">The other point of the distance</param>
        </member>
        <member name="M:TSP_Solver.Distance3.#ctor(TSP_Solver.City3,TSP_Solver.City3,System.Double)">
            <summary>
            Distance3 builder for the geodesic 3D
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="radius"></param>
        </member>
        <member name="M:TSP_Solver.Distance3.#ctor(System.Double,TSP_Solver.City3,TSP_Solver.City3)">
            <summary>
            Distance3 builder for the case where you have the distance
            </summary>
            <param name="distance">The distance between the start point and the end point</param>
            <param name="first">The start point</param>
            <param name="second">The end point</param>
        </member>
        <member name="M:TSP_Solver.Distance3.Is(TSP_Solver.City3,TSP_Solver.City3)">
            <summary>
            If the points formed exactly the distance
            </summary>
            <param name="first">The start point</param>
            <param name="second">The end point</param>
            <returns>
            True if the start point of the distance is the start point test 
            and if the end point of the distance is the end point of the distance
            </returns>
        </member>
        <member name="T:TSP_Solver.Face">
            <summary>
            Class used by some solver functions, so you don't need it
            </summary>
        </member>
        <member name="M:TSP_Solver.Face.#ctor(TSP_Solver.City3,TSP_Solver.City3,TSP_Solver.City3)">
            <summary>
            Face builder
            </summary>
            <param name="a">One of the corner points</param>
            <param name="b">One of the corner points</param>
            <param name="c">One of the corner points</param>
        </member>
        <member name="T:TSP_Solver.Vector3">
            <summary>
            As a simple 3D vector, you don't need to know its functions or use it in any of your methods
            </summary>
        </member>
        <member name="T:TSP_Solver.ICity">
            <summary>
            Interface used by points
            </summary>
        </member>
        <member name="T:TSP_Solver.UnionFind">
            <summary>
            Class used by the solver, so you don't need it
            </summary>
        </member>
    </members>
</doc>
